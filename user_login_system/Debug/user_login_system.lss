
user_login_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bcc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00000bcc  00000c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fb6  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f4  00000000  00000000  00002ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000133c  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00004bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065e  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001502  00000000  00000000  00005532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	dd 00       	.word	0x00dd	; ????
  56:	f6 00       	.word	0x00f6	; ????
  58:	0f 01       	movw	r0, r30
  5a:	28 01       	movw	r4, r16
  5c:	40 01       	movw	r8, r0
  5e:	40 01       	movw	r8, r0
  60:	40 01       	movw	r8, r0
  62:	40 01       	movw	r8, r0
  64:	40 01       	movw	r8, r0
  66:	40 01       	movw	r8, r0
  68:	40 01       	movw	r8, r0
  6a:	40 01       	movw	r8, r0
  6c:	40 01       	movw	r8, r0
  6e:	40 01       	movw	r8, r0
  70:	40 01       	movw	r8, r0
  72:	40 01       	movw	r8, r0
  74:	40 01       	movw	r8, r0
  76:	40 01       	movw	r8, r0
  78:	40 01       	movw	r8, r0
  7a:	40 01       	movw	r8, r0
  7c:	40 01       	movw	r8, r0
  7e:	40 01       	movw	r8, r0
  80:	40 01       	movw	r8, r0
  82:	40 01       	movw	r8, r0
  84:	40 01       	movw	r8, r0
  86:	40 01       	movw	r8, r0
  88:	40 01       	movw	r8, r0
  8a:	40 01       	movw	r8, r0
  8c:	40 01       	movw	r8, r0
  8e:	40 01       	movw	r8, r0
  90:	40 01       	movw	r8, r0
  92:	40 01       	movw	r8, r0
  94:	dd 00       	.word	0x00dd	; ????
  96:	f6 00       	.word	0x00f6	; ????
  98:	0f 01       	movw	r0, r30
  9a:	28 01       	movw	r4, r16
  9c:	4d 01       	movw	r8, r26
  9e:	66 01       	movw	r12, r12
  a0:	7f 01       	movw	r14, r30
  a2:	98 01       	movw	r18, r16
  a4:	b0 01       	movw	r22, r0
  a6:	b0 01       	movw	r22, r0
  a8:	b0 01       	movw	r22, r0
  aa:	b0 01       	movw	r22, r0
  ac:	b0 01       	movw	r22, r0
  ae:	b0 01       	movw	r22, r0
  b0:	b0 01       	movw	r22, r0
  b2:	b0 01       	movw	r22, r0
  b4:	b0 01       	movw	r22, r0
  b6:	b0 01       	movw	r22, r0
  b8:	b0 01       	movw	r22, r0
  ba:	b0 01       	movw	r22, r0
  bc:	b0 01       	movw	r22, r0
  be:	b0 01       	movw	r22, r0
  c0:	b0 01       	movw	r22, r0
  c2:	b0 01       	movw	r22, r0
  c4:	b0 01       	movw	r22, r0
  c6:	b0 01       	movw	r22, r0
  c8:	b0 01       	movw	r22, r0
  ca:	b0 01       	movw	r22, r0
  cc:	b0 01       	movw	r22, r0
  ce:	b0 01       	movw	r22, r0
  d0:	b0 01       	movw	r22, r0
  d2:	b0 01       	movw	r22, r0
  d4:	b0 01       	movw	r22, r0
  d6:	b0 01       	movw	r22, r0
  d8:	b0 01       	movw	r22, r0
  da:	b0 01       	movw	r22, r0
  dc:	4d 01       	movw	r8, r26
  de:	66 01       	movw	r12, r12
  e0:	7f 01       	movw	r14, r30
  e2:	98 01       	movw	r18, r16
  e4:	bc 01       	movw	r22, r24
  e6:	be 01       	movw	r22, r28
  e8:	c0 01       	movw	r24, r0
  ea:	c2 01       	movw	r24, r4
  ec:	c3 01       	movw	r24, r6
  ee:	c3 01       	movw	r24, r6
  f0:	c3 01       	movw	r24, r6
  f2:	c3 01       	movw	r24, r6
  f4:	c3 01       	movw	r24, r6
  f6:	c3 01       	movw	r24, r6
  f8:	c3 01       	movw	r24, r6
  fa:	c3 01       	movw	r24, r6
  fc:	c3 01       	movw	r24, r6
  fe:	c3 01       	movw	r24, r6
 100:	c3 01       	movw	r24, r6
 102:	c3 01       	movw	r24, r6
 104:	c3 01       	movw	r24, r6
 106:	c3 01       	movw	r24, r6
 108:	c3 01       	movw	r24, r6
 10a:	c3 01       	movw	r24, r6
 10c:	c3 01       	movw	r24, r6
 10e:	c3 01       	movw	r24, r6
 110:	c3 01       	movw	r24, r6
 112:	c3 01       	movw	r24, r6
 114:	c3 01       	movw	r24, r6
 116:	c3 01       	movw	r24, r6
 118:	c3 01       	movw	r24, r6
 11a:	c3 01       	movw	r24, r6
 11c:	c3 01       	movw	r24, r6
 11e:	c3 01       	movw	r24, r6
 120:	c3 01       	movw	r24, r6
 122:	c3 01       	movw	r24, r6
 124:	bc 01       	movw	r22, r24
 126:	be 01       	movw	r22, r28
 128:	c0 01       	movw	r24, r0
 12a:	c2 01       	movw	r24, r4
 12c:	cf 01       	movw	r24, r30
 12e:	d1 01       	movw	r26, r2
 130:	d3 01       	movw	r26, r6
 132:	d5 01       	movw	r26, r10
 134:	d6 01       	movw	r26, r12
 136:	d6 01       	movw	r26, r12
 138:	d6 01       	movw	r26, r12
 13a:	d6 01       	movw	r26, r12
 13c:	d6 01       	movw	r26, r12
 13e:	d6 01       	movw	r26, r12
 140:	d6 01       	movw	r26, r12
 142:	d6 01       	movw	r26, r12
 144:	d6 01       	movw	r26, r12
 146:	d6 01       	movw	r26, r12
 148:	d6 01       	movw	r26, r12
 14a:	d6 01       	movw	r26, r12
 14c:	d6 01       	movw	r26, r12
 14e:	d6 01       	movw	r26, r12
 150:	d6 01       	movw	r26, r12
 152:	d6 01       	movw	r26, r12
 154:	d6 01       	movw	r26, r12
 156:	d6 01       	movw	r26, r12
 158:	d6 01       	movw	r26, r12
 15a:	d6 01       	movw	r26, r12
 15c:	d6 01       	movw	r26, r12
 15e:	d6 01       	movw	r26, r12
 160:	d6 01       	movw	r26, r12
 162:	d6 01       	movw	r26, r12
 164:	d6 01       	movw	r26, r12
 166:	d6 01       	movw	r26, r12
 168:	d6 01       	movw	r26, r12
 16a:	d6 01       	movw	r26, r12
 16c:	cf 01       	movw	r24, r30
 16e:	d1 01       	movw	r26, r2
 170:	d3 01       	movw	r26, r6
 172:	d5 01       	movw	r26, r10

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ec ec       	ldi	r30, 0xCC	; 204
 188:	fb e0       	ldi	r31, 0x0B	; 11
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a0 33       	cpi	r26, 0x30	; 48
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>
 196:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
 19a:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_exit>

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <DIO_set_pin_dir>:
		break;	
		default:
		break;	
	}
	return ret_value;
}
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	e1 54       	subi	r30, 0x41	; 65
 1a8:	f1 09       	sbc	r31, r1
 1aa:	e4 32       	cpi	r30, 0x24	; 36
 1ac:	f1 05       	cpc	r31, r1
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <DIO_set_pin_dir+0x10>
 1b0:	67 c0       	rjmp	.+206    	; 0x280 <DIO_set_pin_dir+0xde>
 1b2:	e6 5d       	subi	r30, 0xD6	; 214
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__tablejump2__>
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_set_pin_dir+0x32>
 1be:	2a b3       	in	r18, 0x1a	; 26
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_set_pin_dir+0x28>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_set_pin_dir+0x24>
 1ce:	82 2b       	or	r24, r18
 1d0:	8a bb       	out	0x1a, r24	; 26
 1d2:	08 95       	ret
 1d4:	2a b3       	in	r18, 0x1a	; 26
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_set_pin_dir+0x3e>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_set_pin_dir+0x3a>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	8a bb       	out	0x1a, r24	; 26
 1ea:	08 95       	ret
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	59 f4       	brne	.+22     	; 0x206 <DIO_set_pin_dir+0x64>
 1f0:	27 b3       	in	r18, 0x17	; 23
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_set_pin_dir+0x5a>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_set_pin_dir+0x56>
 200:	82 2b       	or	r24, r18
 202:	87 bb       	out	0x17, r24	; 23
 204:	08 95       	ret
 206:	27 b3       	in	r18, 0x17	; 23
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_set_pin_dir+0x70>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_set_pin_dir+0x6c>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	08 95       	ret
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	59 f4       	brne	.+22     	; 0x238 <DIO_set_pin_dir+0x96>
 222:	24 b3       	in	r18, 0x14	; 20
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_set_pin_dir+0x8c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_set_pin_dir+0x88>
 232:	82 2b       	or	r24, r18
 234:	84 bb       	out	0x14, r24	; 20
 236:	08 95       	ret
 238:	24 b3       	in	r18, 0x14	; 20
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_set_pin_dir+0xa2>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_set_pin_dir+0x9e>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	84 bb       	out	0x14, r24	; 20
 24e:	08 95       	ret
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	59 f4       	brne	.+22     	; 0x26a <DIO_set_pin_dir+0xc8>
 254:	21 b3       	in	r18, 0x11	; 17
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_set_pin_dir+0xbe>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_set_pin_dir+0xba>
 264:	82 2b       	or	r24, r18
 266:	81 bb       	out	0x11, r24	; 17
 268:	08 95       	ret
 26a:	21 b3       	in	r18, 0x11	; 17
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_set_pin_dir+0xd4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_set_pin_dir+0xd0>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret

00000282 <DIO_write_pin>:
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	e1 54       	subi	r30, 0x41	; 65
 288:	f1 09       	sbc	r31, r1
 28a:	e4 32       	cpi	r30, 0x24	; 36
 28c:	f1 05       	cpc	r31, r1
 28e:	08 f0       	brcs	.+2      	; 0x292 <DIO_write_pin+0x10>
 290:	67 c0       	rjmp	.+206    	; 0x360 <DIO_write_pin+0xde>
 292:	e2 5b       	subi	r30, 0xB2	; 178
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__tablejump2__>
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_write_pin+0x32>
 29e:	2b b3       	in	r18, 0x1b	; 27
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write_pin+0x28>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write_pin+0x24>
 2ae:	82 2b       	or	r24, r18
 2b0:	8b bb       	out	0x1b, r24	; 27
 2b2:	08 95       	ret
 2b4:	2b b3       	in	r18, 0x1b	; 27
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write_pin+0x3e>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write_pin+0x3a>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	08 95       	ret
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	59 f4       	brne	.+22     	; 0x2e6 <DIO_write_pin+0x64>
 2d0:	28 b3       	in	r18, 0x18	; 24
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_write_pin+0x5a>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_write_pin+0x56>
 2e0:	82 2b       	or	r24, r18
 2e2:	88 bb       	out	0x18, r24	; 24
 2e4:	08 95       	ret
 2e6:	28 b3       	in	r18, 0x18	; 24
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write_pin+0x70>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write_pin+0x6c>
 2f6:	80 95       	com	r24
 2f8:	82 23       	and	r24, r18
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	08 95       	ret
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	59 f4       	brne	.+22     	; 0x318 <DIO_write_pin+0x96>
 302:	25 b3       	in	r18, 0x15	; 21
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_write_pin+0x8c>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_write_pin+0x88>
 312:	82 2b       	or	r24, r18
 314:	85 bb       	out	0x15, r24	; 21
 316:	08 95       	ret
 318:	25 b3       	in	r18, 0x15	; 21
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_write_pin+0xa2>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_write_pin+0x9e>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	08 95       	ret
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	59 f4       	brne	.+22     	; 0x34a <DIO_write_pin+0xc8>
 334:	22 b3       	in	r18, 0x12	; 18
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_write_pin+0xbe>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_write_pin+0xba>
 344:	82 2b       	or	r24, r18
 346:	82 bb       	out	0x12, r24	; 18
 348:	08 95       	ret
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_write_pin+0xd4>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_write_pin+0xd0>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	82 bb       	out	0x12, r24	; 18
 360:	08 95       	ret

00000362 <DIO_set_port_dir>:

void DIO_set_port_dir(unsigned char port,unsigned char direction)
{
	switch(port)
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	fc 01       	movw	r30, r24
 366:	e1 54       	subi	r30, 0x41	; 65
 368:	f1 09       	sbc	r31, r1
 36a:	e4 32       	cpi	r30, 0x24	; 36
 36c:	f1 05       	cpc	r31, r1
 36e:	58 f4       	brcc	.+22     	; 0x386 <DIO_set_port_dir+0x24>
 370:	ee 58       	subi	r30, 0x8E	; 142
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__tablejump2__>
	{
		case 'a':
		case 'A':
		DDRA=direction;
 378:	6a bb       	out	0x1a, r22	; 26
		break;
 37a:	08 95       	ret
		case 'b':
		case 'B':
		DDRB=direction;
 37c:	67 bb       	out	0x17, r22	; 23
		break;		
 37e:	08 95       	ret
		case 'c':
		case 'C':
		DDRC=direction;
 380:	64 bb       	out	0x14, r22	; 20
		break;		
 382:	08 95       	ret
		case 'd':
		case 'D':
		DDRD=direction;
 384:	61 bb       	out	0x11, r22	; 17
 386:	08 95       	ret

00000388 <DIO_write_port>:
	
}

void DIO_write_port(unsigned char port,unsigned char output_value)
{
	switch(port)
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fc 01       	movw	r30, r24
 38c:	e1 54       	subi	r30, 0x41	; 65
 38e:	f1 09       	sbc	r31, r1
 390:	e4 32       	cpi	r30, 0x24	; 36
 392:	f1 05       	cpc	r31, r1
 394:	58 f4       	brcc	.+22     	; 0x3ac <DIO_write_port+0x24>
 396:	ea 56       	subi	r30, 0x6A	; 106
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__tablejump2__>
	{
		case 'a':
		case 'A':
		PORTA=output_value;
 39e:	6b bb       	out	0x1b, r22	; 27
		break;
 3a0:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=output_value;
 3a2:	68 bb       	out	0x18, r22	; 24
		break;		
 3a4:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=output_value;
 3a6:	65 bb       	out	0x15, r22	; 21
		break;		
 3a8:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=output_value;
 3aa:	62 bb       	out	0x12, r22	; 18
 3ac:	08 95       	ret

000003ae <I2C_master_init>:
	while(READ_BIT(TWCR,TWINT)==0);
	// Check if data has been received and ACK sent
	while((TWSR&0XF8)!=0X50);
	// Return the received data
	return TWDR;
}
 3ae:	9b 01       	movw	r18, r22
 3b0:	ac 01       	movw	r20, r24
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	72 e1       	ldi	r23, 0x12	; 18
 3b6:	8a e7       	ldi	r24, 0x7A	; 122
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 bc 05 	call	0xb78	; 0xb78 <__udivmodsi4>
 3be:	da 01       	movw	r26, r20
 3c0:	c9 01       	movw	r24, r18
 3c2:	40 97       	sbiw	r24, 0x10	; 16
 3c4:	a1 09       	sbc	r26, r1
 3c6:	b1 09       	sbc	r27, r1
 3c8:	b6 95       	lsr	r27
 3ca:	a7 95       	ror	r26
 3cc:	97 95       	ror	r25
 3ce:	87 95       	ror	r24
 3d0:	80 b9       	out	0x00, r24	; 0
 3d2:	11 b8       	out	0x01, r1	; 1
 3d4:	08 95       	ret

000003d6 <I2C_start>:
 3d6:	84 ea       	ldi	r24, 0xA4	; 164
 3d8:	86 bf       	out	0x36, r24	; 54
 3da:	06 b6       	in	r0, 0x36	; 54
 3dc:	07 fe       	sbrs	r0, 7
 3de:	fd cf       	rjmp	.-6      	; 0x3da <I2C_start+0x4>
 3e0:	81 b1       	in	r24, 0x01	; 1
 3e2:	88 7f       	andi	r24, 0xF8	; 248
 3e4:	88 30       	cpi	r24, 0x08	; 8
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <I2C_start+0xa>
 3e8:	08 95       	ret

000003ea <I2C_repeated_start>:
 3ea:	84 ea       	ldi	r24, 0xA4	; 164
 3ec:	86 bf       	out	0x36, r24	; 54
 3ee:	06 b6       	in	r0, 0x36	; 54
 3f0:	07 fe       	sbrs	r0, 7
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <I2C_repeated_start+0x4>
 3f4:	81 b1       	in	r24, 0x01	; 1
 3f6:	88 7f       	andi	r24, 0xF8	; 248
 3f8:	80 31       	cpi	r24, 0x10	; 16
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <I2C_repeated_start+0xa>
 3fc:	08 95       	ret

000003fe <I2C_stop>:
 3fe:	84 e9       	ldi	r24, 0x94	; 148
 400:	86 bf       	out	0x36, r24	; 54
 402:	08 95       	ret

00000404 <I2C_master_send_address_transmitter_mode>:
 404:	88 0f       	add	r24, r24
 406:	83 b9       	out	0x03, r24	; 3
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	86 bf       	out	0x36, r24	; 54
 40c:	06 b6       	in	r0, 0x36	; 54
 40e:	07 fe       	sbrs	r0, 7
 410:	fd cf       	rjmp	.-6      	; 0x40c <I2C_master_send_address_transmitter_mode+0x8>
 412:	81 b1       	in	r24, 0x01	; 1
 414:	88 7f       	andi	r24, 0xF8	; 248
 416:	88 31       	cpi	r24, 0x18	; 24
 418:	e1 f7       	brne	.-8      	; 0x412 <I2C_master_send_address_transmitter_mode+0xe>
 41a:	08 95       	ret

0000041c <I2C_master_send_address_receiver_mode>:
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	81 60       	ori	r24, 0x01	; 1
 424:	83 b9       	out	0x03, r24	; 3
 426:	84 e8       	ldi	r24, 0x84	; 132
 428:	86 bf       	out	0x36, r24	; 54
 42a:	06 b6       	in	r0, 0x36	; 54
 42c:	07 fe       	sbrs	r0, 7
 42e:	fd cf       	rjmp	.-6      	; 0x42a <I2C_master_send_address_receiver_mode+0xe>
 430:	81 b1       	in	r24, 0x01	; 1
 432:	88 7f       	andi	r24, 0xF8	; 248
 434:	80 34       	cpi	r24, 0x40	; 64
 436:	e1 f7       	brne	.-8      	; 0x430 <I2C_master_send_address_receiver_mode+0x14>
 438:	08 95       	ret

0000043a <I2C_master_transmit_data>:
 43a:	83 b9       	out	0x03, r24	; 3
 43c:	84 e8       	ldi	r24, 0x84	; 132
 43e:	86 bf       	out	0x36, r24	; 54
 440:	06 b6       	in	r0, 0x36	; 54
 442:	07 fe       	sbrs	r0, 7
 444:	fd cf       	rjmp	.-6      	; 0x440 <I2C_master_transmit_data+0x6>
 446:	81 b1       	in	r24, 0x01	; 1
 448:	88 7f       	andi	r24, 0xF8	; 248
 44a:	88 32       	cpi	r24, 0x28	; 40
 44c:	e1 f7       	brne	.-8      	; 0x446 <I2C_master_transmit_data+0xc>
 44e:	08 95       	ret

00000450 <I2C_master_receive_data_with_not_ACK>:

char I2C_master_receive_data_with_not_ACK(void)
{
	//clear flag and enable I2C and disable acknowledgment
	TWCR=(1<<TWINT) | (1<<TWEN);
 450:	84 e8       	ldi	r24, 0x84	; 132
 452:	86 bf       	out	0x36, r24	; 54
	//wait for data to  be received
	while(READ_BIT(TWCR,TWINT)==0);
 454:	06 b6       	in	r0, 0x36	; 54
 456:	07 fe       	sbrs	r0, 7
 458:	fd cf       	rjmp	.-6      	; 0x454 <I2C_master_receive_data_with_not_ACK+0x4>
	// Check if data has been received and not ACK sent
	while((TWSR&0XF8)!=0X58);
 45a:	81 b1       	in	r24, 0x01	; 1
 45c:	88 7f       	andi	r24, 0xF8	; 248
 45e:	88 35       	cpi	r24, 0x58	; 88
 460:	e1 f7       	brne	.-8      	; 0x45a <I2C_master_receive_data_with_not_ACK+0xa>
	// Return the received data
	return TWDR;
 462:	83 b1       	in	r24, 0x03	; 3
}
 464:	08 95       	ret

00000466 <enable>:
	#endif
}

static void enable(void)
{
	DIO_write_pin(PORT_2,EN,1);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	82 e4       	ldi	r24, 0x42	; 66
 46c:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	8f e9       	ldi	r24, 0x9F	; 159
 472:	9f e0       	ldi	r25, 0x0F	; 15
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <enable+0xe>
 478:	00 c0       	rjmp	.+0      	; 0x47a <enable+0x14>
 47a:	00 00       	nop
	_delay_ms(2);
	DIO_write_pin(PORT_2,EN,0);
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	82 e4       	ldi	r24, 0x42	; 66
 482:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write_pin>
 486:	8f e9       	ldi	r24, 0x9F	; 159
 488:	9f e0       	ldi	r25, 0x0F	; 15
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <enable+0x24>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <enable+0x2a>
 490:	00 00       	nop
 492:	08 95       	ret

00000494 <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 494:	cf 93       	push	r28
 496:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,0);
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	82 e4       	ldi	r24, 0x42	; 66
 49e:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,cmd);
 4a2:	6c 2f       	mov	r22, r28
 4a4:	81 e4       	ldi	r24, 0x41	; 65
 4a6:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_write_port>
	enable();
 4aa:	0e 94 33 02 	call	0x466	; 0x466 <enable>
 4ae:	8f ec       	ldi	r24, 0xCF	; 207
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_send_cmd+0x1e>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_send_cmd+0x24>
 4b8:	00 00       	nop
	enable();
	DIO_write_high_nibble(PORT_1,cmd);
	enable();
	#endif
	_delay_ms(1);
}
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <LCD_init>:
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	81 ee       	ldi	r24, 0xE1	; 225
 4c2:	94 e0       	ldi	r25, 0x04	; 4
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <LCD_init+0x6>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_init+0x10>
 4ce:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_set_port_dir(PORT_1,0xff);
 4d0:	6f ef       	ldi	r22, 0xFF	; 255
 4d2:	81 e4       	ldi	r24, 0x41	; 65
 4d4:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_set_port_dir>
	DIO_set_pin_dir(PORT_2,EN,1);
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	82 e4       	ldi	r24, 0x42	; 66
 4de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RW,1);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	82 e4       	ldi	r24, 0x42	; 66
 4e8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RS,1);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	82 e4       	ldi	r24, 0x42	; 66
 4f2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_set_pin_dir>
	DIO_write_pin(PORT_2,RW,0);
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write_pin>
	
	LCD_send_cmd(EIGHT_BITS);  //8_bits_mode
 500:	88 e3       	ldi	r24, 0x38	; 56
 502:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_send_cmd>
 506:	8f ec       	ldi	r24, 0xCF	; 207
 508:	97 e0       	ldi	r25, 0x07	; 7
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_init+0x4c>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_init+0x52>
 510:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);  //clear screen
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_send_cmd>
 518:	8f e1       	ldi	r24, 0x1F	; 31
 51a:	9e e4       	ldi	r25, 0x4E	; 78
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_init+0x5e>
 520:	00 c0       	rjmp	.+0      	; 0x522 <LCD_init+0x64>
 522:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(CURSOR_Off_DISPLAY_ON); //curson on, display on
 524:	8c e0       	ldi	r24, 0x0C	; 12
 526:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_send_cmd>
 52a:	8f ec       	ldi	r24, 0xCF	; 207
 52c:	97 e0       	ldi	r25, 0x07	; 7
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_init+0x70>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_init+0x76>
 534:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
 536:	86 e0       	ldi	r24, 0x06	; 6
 538:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_send_cmd>
 53c:	8f ec       	ldi	r24, 0xCF	; 207
 53e:	97 e0       	ldi	r25, 0x07	; 7
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_init+0x82>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_init+0x88>
 546:	00 00       	nop
 548:	08 95       	ret

0000054a <LCD_send_data>:
	#endif
	_delay_ms(1);
}

void LCD_send_data(char data)
{
 54a:	cf 93       	push	r28
 54c:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,1);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	82 e4       	ldi	r24, 0x42	; 66
 554:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,data);
 558:	6c 2f       	mov	r22, r28
 55a:	81 e4       	ldi	r24, 0x41	; 65
 55c:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_write_port>
	enable();
 560:	0e 94 33 02 	call	0x466	; 0x466 <enable>
	enable();
	DIO_write_high_nibble(PORT_1,data);
	enable();
	#endif
	
}
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <LCD_send_string>:

void LCD_send_string(char* string)
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	ec 01       	movw	r28, r24
	while((*string!='\0'))
 56e:	03 c0       	rjmp	.+6      	; 0x576 <LCD_send_string+0xe>
	{
		LCD_send_data(*string);
 570:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
		string++;
 574:	21 96       	adiw	r28, 0x01	; 1
	
}

void LCD_send_string(char* string)
{
	while((*string!='\0'))
 576:	88 81       	ld	r24, Y
 578:	81 11       	cpse	r24, r1
 57a:	fa cf       	rjmp	.-12     	; 0x570 <LCD_send_string+0x8>
	{
		LCD_send_data(*string);
		string++;
	}
}
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_send_cmd>
 588:	8f e1       	ldi	r24, 0x1F	; 31
 58a:	9e e4       	ldi	r25, 0x4E	; 78
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_clr_screen+0xa>
 590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_clr_screen+0x10>
 592:	00 00       	nop
 594:	08 95       	ret

00000596 <LCD_move_cursor>:
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
 596:	9f ef       	ldi	r25, 0xFF	; 255
 598:	98 0f       	add	r25, r24
 59a:	92 30       	cpi	r25, 0x02	; 2
 59c:	70 f4       	brcc	.+28     	; 0x5ba <LCD_move_cursor+0x24>
 59e:	61 31       	cpi	r22, 0x11	; 17
 5a0:	70 f4       	brcc	.+28     	; 0x5be <LCD_move_cursor+0x28>
 5a2:	66 23       	and	r22, r22
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if (row==1)
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <LCD_move_cursor+0x1a>
	{
		data=(0x80+coloum-1);
 5aa:	8f e7       	ldi	r24, 0x7F	; 127
 5ac:	86 0f       	add	r24, r22
 5ae:	0c c0       	rjmp	.+24     	; 0x5c8 <LCD_move_cursor+0x32>
	}
	else if (row==2)
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	49 f4       	brne	.+18     	; 0x5c6 <LCD_move_cursor+0x30>
	{
		data=(0xC0+coloum-1);
 5b4:	8f eb       	ldi	r24, 0xBF	; 191
 5b6:	86 0f       	add	r24, r22
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <LCD_move_cursor+0x32>
void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
	{
		data=0x80;
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <LCD_move_cursor+0x32>
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <LCD_move_cursor+0x32>
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <LCD_move_cursor+0x32>
	_delay_ms(10);
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
 5c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=(0xC0+coloum-1);
	}
	LCD_send_cmd(data);
 5c8:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_send_cmd>
 5cc:	8f ec       	ldi	r24, 0xCF	; 207
 5ce:	97 e0       	ldi	r25, 0x07	; 7
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_move_cursor+0x3a>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <LCD_move_cursor+0x40>
 5d6:	00 00       	nop
 5d8:	08 95       	ret

000005da <main>:
#define EEPROM_thrid_address_of_name 0x27
#define EEPROM_fourth_address_of_name 0x28
#define EEPROM_five_address_of_name 0x29

int main(void)
{
 5da:	ef 92       	push	r14
 5dc:	ff 92       	push	r15
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	62 97       	sbiw	r28, 0x12	; 18
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
	char name[5];
	char check_name[5];
	char pass[4];
	char check_pass[4];

	LCD_init();
 5f6:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_init>
	UART_init(9600);
 5fa:	60 e8       	ldi	r22, 0x80	; 128
 5fc:	75 e2       	ldi	r23, 0x25	; 37
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 91 05 	call	0xb22	; 0xb22 <UART_init>
	I2C_master_init(50000);
 606:	60 e5       	ldi	r22, 0x50	; 80
 608:	73 ec       	ldi	r23, 0xC3	; 195
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_master_init>
 612:	2f ef       	ldi	r18, 0xFF	; 255
 614:	82 e5       	ldi	r24, 0x52	; 82
 616:	97 e0       	ldi	r25, 0x07	; 7
 618:	21 50       	subi	r18, 0x01	; 1
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <main+0x3e>
 620:	00 c0       	rjmp	.+0      	; 0x622 <main+0x48>
 622:	00 00       	nop
	_delay_ms(300);

	// Check if EEPROM is in default state
	I2C_start();
 624:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
	I2C_master_send_address_transmitter_mode(0b1010000); // EEPROM Write Mode
 628:	80 e5       	ldi	r24, 0x50	; 80
 62a:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
	I2C_master_transmit_data(EEPROM_status_address); // Send status address
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
	I2C_repeated_start(); // Repeated start
 634:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_repeated_start>
	I2C_master_send_address_receiver_mode(0b1010000); // EEPROM Read Mode
 638:	80 e5       	ldi	r24, 0x50	; 80
 63a:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_master_send_address_receiver_mode>
	value = I2C_master_receive_data_with_not_ACK(); // Read value from EEPROM
 63e:	0e 94 28 02 	call	0x450	; 0x450 <I2C_master_receive_data_with_not_ACK>
 642:	18 2f       	mov	r17, r24
	I2C_stop();
 644:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>

	if (EEPROM_default_value == value)
 648:	1f 3f       	cpi	r17, 0xFF	; 255
 64a:	09 f0       	breq	.+2      	; 0x64e <main+0x74>
 64c:	8e c0       	rjmp	.+284    	; 0x76a <main+0x190>
	{
		LCD_send_string("   Create name");
 64e:	80 e6       	ldi	r24, 0x60	; 96
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 656:	2f ef       	ldi	r18, 0xFF	; 255
 658:	89 e6       	ldi	r24, 0x69	; 105
 65a:	98 e1       	ldi	r25, 0x18	; 24
 65c:	21 50       	subi	r18, 0x01	; 1
 65e:	80 40       	sbci	r24, 0x00	; 0
 660:	90 40       	sbci	r25, 0x00	; 0
 662:	e1 f7       	brne	.-8      	; 0x65c <main+0x82>
 664:	00 c0       	rjmp	.+0      	; 0x666 <main+0x8c>
 666:	00 00       	nop
		_delay_ms(1000);
		LCD_clr_screen();
 668:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
		LCD_send_string("user name:");
 66c:	8f e6       	ldi	r24, 0x6F	; 111
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>

		for (count = 0; count < 5; count++)
 674:	10 e0       	ldi	r17, 0x00	; 0
 676:	20 c0       	rjmp	.+64     	; 0x6b8 <main+0xde>
		{
			LCD_move_cursor(1, 11 + count);
 678:	6b e0       	ldi	r22, 0x0B	; 11
 67a:	61 0f       	add	r22, r17
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
			val_1 = UART_receive_data();
 682:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 686:	f8 2e       	mov	r15, r24
			LCD_send_data(val_1);
 688:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
			name[count] = val_1;
 68c:	e1 e0       	ldi	r30, 0x01	; 1
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	ec 0f       	add	r30, r28
 692:	fd 1f       	adc	r31, r29
 694:	e1 0f       	add	r30, r17
 696:	f1 1d       	adc	r31, r1
 698:	f0 82       	st	Z, r15
			
			// Write the name to EEPROM
			I2C_start();
 69a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
			I2C_master_send_address_transmitter_mode(0b1010000);
 69e:	80 e5       	ldi	r24, 0x50	; 80
 6a0:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
			I2C_master_transmit_data(EEPROM_first_address_of_name + count);
 6a4:	85 e2       	ldi	r24, 0x25	; 37
 6a6:	81 0f       	add	r24, r17
 6a8:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
			I2C_master_transmit_data(val_1);
 6ac:	8f 2d       	mov	r24, r15
 6ae:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
			I2C_stop();
 6b2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
		LCD_send_string("   Create name");
		_delay_ms(1000);
		LCD_clr_screen();
		LCD_send_string("user name:");

		for (count = 0; count < 5; count++)
 6b6:	1f 5f       	subi	r17, 0xFF	; 255
 6b8:	15 30       	cpi	r17, 0x05	; 5
 6ba:	f0 f2       	brcs	.-68     	; 0x678 <main+0x9e>
			I2C_master_send_address_transmitter_mode(0b1010000);
			I2C_master_transmit_data(EEPROM_first_address_of_name + count);
			I2C_master_transmit_data(val_1);
			I2C_stop();
		}
		val_1 = UART_receive_data(); //next line in pc (enter)
 6bc:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 6c0:	2f ef       	ldi	r18, 0xFF	; 255
 6c2:	84 e3       	ldi	r24, 0x34	; 52
 6c4:	9c e0       	ldi	r25, 0x0C	; 12
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	80 40       	sbci	r24, 0x00	; 0
 6ca:	90 40       	sbci	r25, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <main+0xec>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <main+0xf6>
 6d0:	00 00       	nop
		_delay_ms(500);
		LCD_clr_screen();
 6d2:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
		LCD_send_string("password:");
 6d6:	8a e7       	ldi	r24, 0x7A	; 122
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>

		for (count = 0; count < 4; count++)
 6de:	10 e0       	ldi	r17, 0x00	; 0
 6e0:	2c c0       	rjmp	.+88     	; 0x73a <main+0x160>
		{
			val_1 = UART_receive_data();
 6e2:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 6e6:	f8 2e       	mov	r15, r24
			LCD_send_data(val_1);
 6e8:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	84 e3       	ldi	r24, 0x34	; 52
 6f0:	9c e0       	ldi	r25, 0x0C	; 12
 6f2:	21 50       	subi	r18, 0x01	; 1
 6f4:	80 40       	sbci	r24, 0x00	; 0
 6f6:	90 40       	sbci	r25, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <main+0x118>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <main+0x122>
 6fc:	00 00       	nop
			_delay_ms(500);
			LCD_move_cursor(1, 10 + count);
 6fe:	6a e0       	ldi	r22, 0x0A	; 10
 700:	61 0f       	add	r22, r17
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
			LCD_send_data('*');
 708:	8a e2       	ldi	r24, 0x2A	; 42
 70a:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
			pass[count] = val_1;
 70e:	eb e0       	ldi	r30, 0x0B	; 11
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	ec 0f       	add	r30, r28
 714:	fd 1f       	adc	r31, r29
 716:	e1 0f       	add	r30, r17
 718:	f1 1d       	adc	r31, r1
 71a:	f0 82       	st	Z, r15
			
			// Write the password to EEPROM
			I2C_start();
 71c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
			I2C_master_send_address_transmitter_mode(0b1010000);
 720:	80 e5       	ldi	r24, 0x50	; 80
 722:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
			I2C_master_transmit_data(EEPROM_first_address_of_password + count);
 726:	81 e2       	ldi	r24, 0x21	; 33
 728:	81 0f       	add	r24, r17
 72a:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
			I2C_master_transmit_data(val_1);
 72e:	8f 2d       	mov	r24, r15
 730:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
			I2C_stop();
 734:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
		val_1 = UART_receive_data(); //next line in pc (enter)
		_delay_ms(500);
		LCD_clr_screen();
		LCD_send_string("password:");

		for (count = 0; count < 4; count++)
 738:	1f 5f       	subi	r17, 0xFF	; 255
 73a:	14 30       	cpi	r17, 0x04	; 4
 73c:	90 f2       	brcs	.-92     	; 0x6e2 <main+0x108>
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	84 e3       	ldi	r24, 0x34	; 52
 742:	9c e0       	ldi	r25, 0x0C	; 12
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x16a>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x174>
 74e:	00 00       	nop
			I2C_stop();
		}

		_delay_ms(500);
		// Mark EEPROM as initialized
		I2C_start();
 750:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
		I2C_master_send_address_transmitter_mode(0b1010000);
 754:	80 e5       	ldi	r24, 0x50	; 80
 756:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
		I2C_master_transmit_data(EEPROM_status_address);
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
		I2C_master_transmit_data(0);
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
		I2C_stop();
 766:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
	}
	val_1 = UART_receive_data(); //next line in pc (enter)
 76a:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 76e:	2f ef       	ldi	r18, 0xFF	; 255
 770:	84 e3       	ldi	r24, 0x34	; 52
 772:	9c e0       	ldi	r25, 0x0C	; 12
 774:	21 50       	subi	r18, 0x01	; 1
 776:	80 40       	sbci	r24, 0x00	; 0
 778:	90 40       	sbci	r25, 0x00	; 0
 77a:	e1 f7       	brne	.-8      	; 0x774 <main+0x19a>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <main+0x1a4>
 77e:	00 00       	nop
	_delay_ms(500);
	LCD_clr_screen();
 780:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
	LCD_send_string("user login ");
 784:	84 e8       	ldi	r24, 0x84	; 132
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 78c:	2f ef       	ldi	r18, 0xFF	; 255
 78e:	89 e6       	ldi	r24, 0x69	; 105
 790:	98 e1       	ldi	r25, 0x18	; 24
 792:	21 50       	subi	r18, 0x01	; 1
 794:	80 40       	sbci	r24, 0x00	; 0
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	e1 f7       	brne	.-8      	; 0x792 <main+0x1b8>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <main+0x1c2>
 79c:	00 00       	nop
	_delay_ms(1000);
	LCD_clr_screen();
 79e:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
	LCD_send_string("user name:");
 7a2:	8f e6       	ldi	r24, 0x6F	; 111
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>

	for (count = 0; count < 5; count++)
 7aa:	10 e0       	ldi	r17, 0x00	; 0
 7ac:	2d c0       	rjmp	.+90     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		LCD_move_cursor(1, 11 + count);
 7ae:	6b e0       	ldi	r22, 0x0B	; 11
 7b0:	61 0f       	add	r22, r17
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
		val_1 = UART_receive_data();
 7b8:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 7bc:	08 2f       	mov	r16, r24
		LCD_send_data(val_1);
 7be:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
		check_name[count] = val_1;
 7c2:	e1 2e       	mov	r14, r17
 7c4:	f1 2c       	mov	r15, r1
 7c6:	e6 e0       	ldi	r30, 0x06	; 6
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	ec 0f       	add	r30, r28
 7cc:	fd 1f       	adc	r31, r29
 7ce:	ee 0d       	add	r30, r14
 7d0:	ff 1d       	adc	r31, r15
 7d2:	00 83       	st	Z, r16
		// Read stored name from EEPROM for validation
		I2C_start();
 7d4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
		I2C_master_send_address_transmitter_mode(0b1010000);
 7d8:	80 e5       	ldi	r24, 0x50	; 80
 7da:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
		I2C_master_transmit_data(EEPROM_first_address_of_name + count);
 7de:	85 e2       	ldi	r24, 0x25	; 37
 7e0:	81 0f       	add	r24, r17
 7e2:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
		I2C_repeated_start();
 7e6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_repeated_start>
		I2C_master_send_address_receiver_mode(0b1010000);
 7ea:	80 e5       	ldi	r24, 0x50	; 80
 7ec:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_master_send_address_receiver_mode>
		name[count] = I2C_master_receive_data_with_not_ACK(); // Read the stored name
 7f0:	0e 94 28 02 	call	0x450	; 0x450 <I2C_master_receive_data_with_not_ACK>
 7f4:	e1 e0       	ldi	r30, 0x01	; 1
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	ec 0f       	add	r30, r28
 7fa:	fd 1f       	adc	r31, r29
 7fc:	ee 0d       	add	r30, r14
 7fe:	ff 1d       	adc	r31, r15
 800:	80 83       	st	Z, r24
		I2C_stop();
 802:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
	LCD_send_string("user login ");
	_delay_ms(1000);
	LCD_clr_screen();
	LCD_send_string("user name:");

	for (count = 0; count < 5; count++)
 806:	1f 5f       	subi	r17, 0xFF	; 255
 808:	15 30       	cpi	r17, 0x05	; 5
 80a:	88 f2       	brcs	.-94     	; 0x7ae <main+0x1d4>
 80c:	2f ef       	ldi	r18, 0xFF	; 255
 80e:	84 e3       	ldi	r24, 0x34	; 52
 810:	9c e0       	ldi	r25, 0x0C	; 12
 812:	21 50       	subi	r18, 0x01	; 1
 814:	80 40       	sbci	r24, 0x00	; 0
 816:	90 40       	sbci	r25, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81c:	00 00       	nop
		I2C_master_send_address_receiver_mode(0b1010000);
		name[count] = I2C_master_receive_data_with_not_ACK(); // Read the stored name
		I2C_stop();
	}
	_delay_ms(500);
	if (name[0] != check_name[0] || name[1] != check_name[1] || name[2] != check_name[2] || name[3] != check_name[3] || name[4] != check_name[4]) // Validate entered name
 81e:	99 81       	ldd	r25, Y+1	; 0x01
 820:	8e 81       	ldd	r24, Y+6	; 0x06
 822:	98 13       	cpse	r25, r24
 824:	10 c0       	rjmp	.+32     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 826:	9a 81       	ldd	r25, Y+2	; 0x02
 828:	8f 81       	ldd	r24, Y+7	; 0x07
 82a:	98 13       	cpse	r25, r24
 82c:	0c c0       	rjmp	.+24     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 82e:	9b 81       	ldd	r25, Y+3	; 0x03
 830:	88 85       	ldd	r24, Y+8	; 0x08
 832:	98 13       	cpse	r25, r24
 834:	08 c0       	rjmp	.+16     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 836:	9c 81       	ldd	r25, Y+4	; 0x04
 838:	89 85       	ldd	r24, Y+9	; 0x09
 83a:	98 13       	cpse	r25, r24
 83c:	04 c0       	rjmp	.+8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83e:	9d 81       	ldd	r25, Y+5	; 0x05
 840:	8a 85       	ldd	r24, Y+10	; 0x0a
 842:	98 17       	cp	r25, r24
 844:	39 f0       	breq	.+14     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	{
		// Handle name mismatch case
		LCD_clr_screen();
 846:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
		LCD_send_string("user not exit!");
 84a:	80 e9       	ldi	r24, 0x90	; 144
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 852:	ff cf       	rjmp	.-2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		while(1); // Halt in error
	}
	val_1 = UART_receive_data(); //next line in pc (enter)
 854:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	84 e3       	ldi	r24, 0x34	; 52
 85c:	9c e0       	ldi	r25, 0x0C	; 12
 85e:	21 50       	subi	r18, 0x01	; 1
 860:	80 40       	sbci	r24, 0x00	; 0
 862:	90 40       	sbci	r25, 0x00	; 0
 864:	e1 f7       	brne	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
 868:	00 00       	nop
	_delay_ms(500);
	LCD_clr_screen();
 86a:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
	LCD_send_string("password:");
 86e:	8a e7       	ldi	r24, 0x7A	; 122
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>

	for (count = 0; count < 4; count++)
 876:	10 e0       	ldi	r17, 0x00	; 0
 878:	39 c0       	rjmp	.+114    	; 0x8ec <__stack+0x8d>
	{
		val_1 = UART_receive_data();
 87a:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 87e:	08 2f       	mov	r16, r24
		LCD_send_data(val_1);
 880:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
 884:	2f ef       	ldi	r18, 0xFF	; 255
 886:	84 e3       	ldi	r24, 0x34	; 52
 888:	9c e0       	ldi	r25, 0x0C	; 12
 88a:	21 50       	subi	r18, 0x01	; 1
 88c:	80 40       	sbci	r24, 0x00	; 0
 88e:	90 40       	sbci	r25, 0x00	; 0
 890:	e1 f7       	brne	.-8      	; 0x88a <__stack+0x2b>
 892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
 894:	00 00       	nop
		_delay_ms(500);
		LCD_move_cursor(1, 10 + count);
 896:	6a e0       	ldi	r22, 0x0A	; 10
 898:	61 0f       	add	r22, r17
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
		LCD_send_data('*');
 8a0:	8a e2       	ldi	r24, 0x2A	; 42
 8a2:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
		check_pass[count] = val_1;
 8a6:	e1 2e       	mov	r14, r17
 8a8:	f1 2c       	mov	r15, r1
 8aa:	ef e0       	ldi	r30, 0x0F	; 15
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	ec 0f       	add	r30, r28
 8b0:	fd 1f       	adc	r31, r29
 8b2:	ee 0d       	add	r30, r14
 8b4:	ff 1d       	adc	r31, r15
 8b6:	00 83       	st	Z, r16
		// Read stored password from EEPROM for validation
		I2C_start();
 8b8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
		I2C_master_send_address_transmitter_mode(0b1010000);
 8bc:	80 e5       	ldi	r24, 0x50	; 80
 8be:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
		I2C_master_transmit_data(EEPROM_first_address_of_password + count);
 8c2:	81 e2       	ldi	r24, 0x21	; 33
 8c4:	81 0f       	add	r24, r17
 8c6:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
		I2C_repeated_start();
 8ca:	0e 94 f5 01 	call	0x3ea	; 0x3ea <I2C_repeated_start>
		I2C_master_send_address_receiver_mode(0b1010000);
 8ce:	80 e5       	ldi	r24, 0x50	; 80
 8d0:	0e 94 0e 02 	call	0x41c	; 0x41c <I2C_master_send_address_receiver_mode>
		pass[count] = I2C_master_receive_data_with_not_ACK(); // Read the stored password
 8d4:	0e 94 28 02 	call	0x450	; 0x450 <I2C_master_receive_data_with_not_ACK>
 8d8:	eb e0       	ldi	r30, 0x0B	; 11
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	ec 0f       	add	r30, r28
 8de:	fd 1f       	adc	r31, r29
 8e0:	ee 0d       	add	r30, r14
 8e2:	ff 1d       	adc	r31, r15
 8e4:	80 83       	st	Z, r24
		I2C_stop();
 8e6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
	val_1 = UART_receive_data(); //next line in pc (enter)
	_delay_ms(500);
	LCD_clr_screen();
	LCD_send_string("password:");

	for (count = 0; count < 4; count++)
 8ea:	1f 5f       	subi	r17, 0xFF	; 255
 8ec:	14 30       	cpi	r17, 0x04	; 4
 8ee:	28 f2       	brcs	.-118    	; 0x87a <__stack+0x1b>
 8f0:	2f ef       	ldi	r18, 0xFF	; 255
 8f2:	84 e3       	ldi	r24, 0x34	; 52
 8f4:	9c e0       	ldi	r25, 0x0C	; 12
 8f6:	21 50       	subi	r18, 0x01	; 1
 8f8:	80 40       	sbci	r24, 0x00	; 0
 8fa:	90 40       	sbci	r25, 0x00	; 0
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <__stack+0x97>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0xa1>
 900:	00 00       	nop
		I2C_master_send_address_receiver_mode(0b1010000);
		pass[count] = I2C_master_receive_data_with_not_ACK(); // Read the stored password
		I2C_stop();
	}
	_delay_ms(500);
	if (pass[0] != check_pass[0] || pass[1] != check_pass[1] || pass[2] != check_pass[2] || pass[3] != check_pass[3]) // Validate entered password
 902:	9b 85       	ldd	r25, Y+11	; 0x0b
 904:	8f 85       	ldd	r24, Y+15	; 0x0f
 906:	98 13       	cpse	r25, r24
 908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0xc3>
 90a:	9c 85       	ldd	r25, Y+12	; 0x0c
 90c:	88 89       	ldd	r24, Y+16	; 0x10
 90e:	98 13       	cpse	r25, r24
 910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0xc3>
 912:	9d 85       	ldd	r25, Y+13	; 0x0d
 914:	89 89       	ldd	r24, Y+17	; 0x11
 916:	98 13       	cpse	r25, r24
 918:	04 c0       	rjmp	.+8      	; 0x922 <__stack+0xc3>
 91a:	9e 85       	ldd	r25, Y+14	; 0x0e
 91c:	8a 89       	ldd	r24, Y+18	; 0x12
 91e:	98 17       	cp	r25, r24
 920:	39 f0       	breq	.+14     	; 0x930 <__stack+0xd1>
	{
		// Handle password mismatch case
		LCD_clr_screen();
 922:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
		LCD_send_string("Wrong Password!");
 926:	8f e9       	ldi	r24, 0x9F	; 159
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stack+0xcf>
		while(1); // Halt in error
	}
	val_1 = UART_receive_data(); //next line in pc (enter)
 930:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
	// If all validations pass, proceed to next steps
	LCD_clr_screen();
 934:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
	LCD_send_string("Login Successful!");
 938:	8f ea       	ldi	r24, 0xAF	; 175
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 940:	2f ef       	ldi	r18, 0xFF	; 255
 942:	89 e6       	ldi	r24, 0x69	; 105
 944:	98 e1       	ldi	r25, 0x18	; 24
 946:	21 50       	subi	r18, 0x01	; 1
 948:	80 40       	sbci	r24, 0x00	; 0
 94a:	90 40       	sbci	r25, 0x00	; 0
 94c:	e1 f7       	brne	.-8      	; 0x946 <__stack+0xe7>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0xf1>
 950:	00 00       	nop
	_delay_ms(1000);
	LCD_move_cursor(2,1);
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
	LCD_send_string("press 1 to set");
 95a:	81 ec       	ldi	r24, 0xC1	; 193
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
	val_1 = UART_receive_data();
 962:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
	if ('1'==val_1)
 966:	81 33       	cpi	r24, 0x31	; 49
 968:	09 f0       	breq	.+2      	; 0x96c <__stack+0x10d>
 96a:	cc c0       	rjmp	.+408    	; 0xb04 <__stack+0x2a5>
	{
		val_1 = UART_receive_data(); //next line in pc (enter)
 96c:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
		LCD_clr_screen();
 970:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
		LCD_send_string("1-change pass");
 974:	80 ed       	ldi	r24, 0xD0	; 208
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
		LCD_move_cursor(2,1);
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
		LCD_send_string("2-change name");
 984:	8e ed       	ldi	r24, 0xDE	; 222
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
		val_1 = UART_receive_data();
 98c:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
		if ('1'==val_1)
 990:	81 33       	cpi	r24, 0x31	; 49
 992:	09 f0       	breq	.+2      	; 0x996 <__stack+0x137>
 994:	59 c0       	rjmp	.+178    	; 0xa48 <__stack+0x1e9>
		{
			val_1 = UART_receive_data(); //next line in pc (enter)
 996:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 99a:	2f ef       	ldi	r18, 0xFF	; 255
 99c:	84 e3       	ldi	r24, 0x34	; 52
 99e:	9c e0       	ldi	r25, 0x0C	; 12
 9a0:	21 50       	subi	r18, 0x01	; 1
 9a2:	80 40       	sbci	r24, 0x00	; 0
 9a4:	90 40       	sbci	r25, 0x00	; 0
 9a6:	e1 f7       	brne	.-8      	; 0x9a0 <__stack+0x141>
 9a8:	00 c0       	rjmp	.+0      	; 0x9aa <__stack+0x14b>
 9aa:	00 00       	nop
			_delay_ms(500);
			LCD_clr_screen();
 9ac:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string("password:");
 9b0:	8a e7       	ldi	r24, 0x7A	; 122
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>

			for (count = 0; count < 4; count++)
 9b8:	10 e0       	ldi	r17, 0x00	; 0
 9ba:	25 c0       	rjmp	.+74     	; 0xa06 <__stack+0x1a7>
			{
				val_1 = UART_receive_data();
 9bc:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 9c0:	f8 2e       	mov	r15, r24
				LCD_send_data(val_1);
 9c2:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
 9c6:	2f ef       	ldi	r18, 0xFF	; 255
 9c8:	84 e3       	ldi	r24, 0x34	; 52
 9ca:	9c e0       	ldi	r25, 0x0C	; 12
 9cc:	21 50       	subi	r18, 0x01	; 1
 9ce:	80 40       	sbci	r24, 0x00	; 0
 9d0:	90 40       	sbci	r25, 0x00	; 0
 9d2:	e1 f7       	brne	.-8      	; 0x9cc <__stack+0x16d>
 9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__stack+0x177>
 9d6:	00 00       	nop
				_delay_ms(500);
				LCD_move_cursor(1, 10 + count);
 9d8:	6a e0       	ldi	r22, 0x0A	; 10
 9da:	61 0f       	add	r22, r17
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
				LCD_send_data('*');
 9e2:	8a e2       	ldi	r24, 0x2A	; 42
 9e4:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
				pass[count] = val_1;
				
				// Write the password to EEPROM
				I2C_start();
 9e8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
				I2C_master_send_address_transmitter_mode(0b1010000);
 9ec:	80 e5       	ldi	r24, 0x50	; 80
 9ee:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
				I2C_master_transmit_data(EEPROM_first_address_of_password + count);
 9f2:	81 e2       	ldi	r24, 0x21	; 33
 9f4:	81 0f       	add	r24, r17
 9f6:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
				I2C_master_transmit_data(val_1);
 9fa:	8f 2d       	mov	r24, r15
 9fc:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
				I2C_stop();
 a00:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
			val_1 = UART_receive_data(); //next line in pc (enter)
			_delay_ms(500);
			LCD_clr_screen();
			LCD_send_string("password:");

			for (count = 0; count < 4; count++)
 a04:	1f 5f       	subi	r17, 0xFF	; 255
 a06:	14 30       	cpi	r17, 0x04	; 4
 a08:	c8 f2       	brcs	.-78     	; 0x9bc <__stack+0x15d>
 a0a:	2f ef       	ldi	r18, 0xFF	; 255
 a0c:	84 e3       	ldi	r24, 0x34	; 52
 a0e:	9c e0       	ldi	r25, 0x0C	; 12
 a10:	21 50       	subi	r18, 0x01	; 1
 a12:	80 40       	sbci	r24, 0x00	; 0
 a14:	90 40       	sbci	r25, 0x00	; 0
 a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x1b1>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <__stack+0x1bb>
 a1a:	00 00       	nop
				I2C_master_transmit_data(EEPROM_first_address_of_password + count);
				I2C_master_transmit_data(val_1);
				I2C_stop();
			}
			_delay_ms(500);
			LCD_clr_screen();
 a1c:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string("password changed");
 a20:	8c ee       	ldi	r24, 0xEC	; 236
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 a28:	2f ef       	ldi	r18, 0xFF	; 255
 a2a:	89 e6       	ldi	r24, 0x69	; 105
 a2c:	98 e1       	ldi	r25, 0x18	; 24
 a2e:	21 50       	subi	r18, 0x01	; 1
 a30:	80 40       	sbci	r24, 0x00	; 0
 a32:	90 40       	sbci	r25, 0x00	; 0
 a34:	e1 f7       	brne	.-8      	; 0xa2e <__stack+0x1cf>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <__stack+0x1d9>
 a38:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 a3a:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string("    welcome");
 a3e:	8d ef       	ldi	r24, 0xFD	; 253
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 a46:	5e c0       	rjmp	.+188    	; 0xb04 <__stack+0x2a5>
		}
		else if ('2'==val_1)
 a48:	82 33       	cpi	r24, 0x32	; 50
 a4a:	09 f0       	breq	.+2      	; 0xa4e <__stack+0x1ef>
 a4c:	5b c0       	rjmp	.+182    	; 0xb04 <__stack+0x2a5>
		{
			val_1 = UART_receive_data(); //next line in pc (enter)
 a4e:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 a52:	2f ef       	ldi	r18, 0xFF	; 255
 a54:	84 e3       	ldi	r24, 0x34	; 52
 a56:	9c e0       	ldi	r25, 0x0C	; 12
 a58:	21 50       	subi	r18, 0x01	; 1
 a5a:	80 40       	sbci	r24, 0x00	; 0
 a5c:	90 40       	sbci	r25, 0x00	; 0
 a5e:	e1 f7       	brne	.-8      	; 0xa58 <__stack+0x1f9>
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <__stack+0x203>
 a62:	00 00       	nop
			_delay_ms(500);
			LCD_clr_screen();
 a64:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string(" to change name");
 a68:	89 e0       	ldi	r24, 0x09	; 9
 a6a:	91 e0       	ldi	r25, 0x01	; 1
 a6c:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 a70:	2f ef       	ldi	r18, 0xFF	; 255
 a72:	89 e6       	ldi	r24, 0x69	; 105
 a74:	98 e1       	ldi	r25, 0x18	; 24
 a76:	21 50       	subi	r18, 0x01	; 1
 a78:	80 40       	sbci	r24, 0x00	; 0
 a7a:	90 40       	sbci	r25, 0x00	; 0
 a7c:	e1 f7       	brne	.-8      	; 0xa76 <__stack+0x217>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <__stack+0x221>
 a80:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 a82:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string("new name:");
 a86:	89 e1       	ldi	r24, 0x19	; 25
 a88:	91 e0       	ldi	r25, 0x01	; 1
 a8a:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>

			for (count = 0; count < 5; count++)
 a8e:	10 e0       	ldi	r17, 0x00	; 0
 a90:	19 c0       	rjmp	.+50     	; 0xac4 <__stack+0x265>
			{
				LCD_move_cursor(1, 11 + count);
 a92:	6b e0       	ldi	r22, 0x0B	; 11
 a94:	61 0f       	add	r22, r17
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_move_cursor>
				val_1 = UART_receive_data();
 a9c:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_receive_data>
 aa0:	f8 2e       	mov	r15, r24
				LCD_send_data(val_1);
 aa2:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_send_data>
				name[count] = val_1;
				
				// Write the name to EEPROM
				I2C_start();
 aa6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_start>
				I2C_master_send_address_transmitter_mode(0b1010000);
 aaa:	80 e5       	ldi	r24, 0x50	; 80
 aac:	0e 94 02 02 	call	0x404	; 0x404 <I2C_master_send_address_transmitter_mode>
				I2C_master_transmit_data(EEPROM_first_address_of_name + count);
 ab0:	85 e2       	ldi	r24, 0x25	; 37
 ab2:	81 0f       	add	r24, r17
 ab4:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
				I2C_master_transmit_data(val_1);
 ab8:	8f 2d       	mov	r24, r15
 aba:	0e 94 1d 02 	call	0x43a	; 0x43a <I2C_master_transmit_data>
				I2C_stop();
 abe:	0e 94 ff 01 	call	0x3fe	; 0x3fe <I2C_stop>
			LCD_send_string(" to change name");
			_delay_ms(1000);
			LCD_clr_screen();
			LCD_send_string("new name:");

			for (count = 0; count < 5; count++)
 ac2:	1f 5f       	subi	r17, 0xFF	; 255
 ac4:	15 30       	cpi	r17, 0x05	; 5
 ac6:	28 f3       	brcs	.-54     	; 0xa92 <__stack+0x233>
 ac8:	2f ef       	ldi	r18, 0xFF	; 255
 aca:	84 e3       	ldi	r24, 0x34	; 52
 acc:	9c e0       	ldi	r25, 0x0C	; 12
 ace:	21 50       	subi	r18, 0x01	; 1
 ad0:	80 40       	sbci	r24, 0x00	; 0
 ad2:	90 40       	sbci	r25, 0x00	; 0
 ad4:	e1 f7       	brne	.-8      	; 0xace <__stack+0x26f>
 ad6:	00 c0       	rjmp	.+0      	; 0xad8 <__stack+0x279>
 ad8:	00 00       	nop
				I2C_master_transmit_data(EEPROM_first_address_of_name + count);
				I2C_master_transmit_data(val_1);
				I2C_stop();
			}
			_delay_ms(500);
			LCD_clr_screen();
 ada:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string("name changed");
 ade:	83 e2       	ldi	r24, 0x23	; 35
 ae0:	91 e0       	ldi	r25, 0x01	; 1
 ae2:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
 ae6:	2f ef       	ldi	r18, 0xFF	; 255
 ae8:	89 e6       	ldi	r24, 0x69	; 105
 aea:	98 e1       	ldi	r25, 0x18	; 24
 aec:	21 50       	subi	r18, 0x01	; 1
 aee:	80 40       	sbci	r24, 0x00	; 0
 af0:	90 40       	sbci	r25, 0x00	; 0
 af2:	e1 f7       	brne	.-8      	; 0xaec <__stack+0x28d>
 af4:	00 c0       	rjmp	.+0      	; 0xaf6 <__stack+0x297>
 af6:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 af8:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_clr_screen>
			LCD_send_string("    welcome");
 afc:	8d ef       	ldi	r24, 0xFD	; 253
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_send_string>
		}
	}
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	62 96       	adiw	r28, 0x12	; 18
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	f8 94       	cli
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	cd bf       	out	0x3d, r28	; 61
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	0f 91       	pop	r16
 b1c:	ff 90       	pop	r15
 b1e:	ef 90       	pop	r14
 b20:	08 95       	ret

00000b22 <UART_init>:
	{
		UART_send_data(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
 b22:	dc 01       	movw	r26, r24
 b24:	cb 01       	movw	r24, r22
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	aa 1f       	adc	r26, r26
 b2c:	bb 1f       	adc	r27, r27
 b2e:	88 0f       	add	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	aa 1f       	adc	r26, r26
 b34:	bb 1f       	adc	r27, r27
 b36:	9c 01       	movw	r18, r24
 b38:	ad 01       	movw	r20, r26
 b3a:	22 0f       	add	r18, r18
 b3c:	33 1f       	adc	r19, r19
 b3e:	44 1f       	adc	r20, r20
 b40:	55 1f       	adc	r21, r21
 b42:	22 0f       	add	r18, r18
 b44:	33 1f       	adc	r19, r19
 b46:	44 1f       	adc	r20, r20
 b48:	55 1f       	adc	r21, r21
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	72 e1       	ldi	r23, 0x12	; 18
 b4e:	8a e7       	ldi	r24, 0x7A	; 122
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 bc 05 	call	0xb78	; 0xb78 <__udivmodsi4>
 b56:	21 50       	subi	r18, 0x01	; 1
 b58:	31 09       	sbc	r19, r1
 b5a:	30 bd       	out	0x20, r19	; 32
 b5c:	29 b9       	out	0x09, r18	; 9
 b5e:	8a b1       	in	r24, 0x0a	; 10
 b60:	88 60       	ori	r24, 0x08	; 8
 b62:	8a b9       	out	0x0a, r24	; 10
 b64:	8a b1       	in	r24, 0x0a	; 10
 b66:	80 61       	ori	r24, 0x10	; 16
 b68:	8a b9       	out	0x0a, r24	; 10
 b6a:	86 e8       	ldi	r24, 0x86	; 134
 b6c:	80 bd       	out	0x20, r24	; 32
 b6e:	08 95       	ret

00000b70 <UART_receive_data>:

char UART_receive_data(void)
{
	//wait for UDR receive buffer to be filled with data
	while(READ_BIT(UCSRA,RXC)==0);
 b70:	5f 9b       	sbis	0x0b, 7	; 11
 b72:	fe cf       	rjmp	.-4      	; 0xb70 <UART_receive_data>
	//receive data from UDR receive buffer
	return UDR;
 b74:	8c b1       	in	r24, 0x0c	; 12
}
 b76:	08 95       	ret

00000b78 <__udivmodsi4>:
 b78:	a1 e2       	ldi	r26, 0x21	; 33
 b7a:	1a 2e       	mov	r1, r26
 b7c:	aa 1b       	sub	r26, r26
 b7e:	bb 1b       	sub	r27, r27
 b80:	fd 01       	movw	r30, r26
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <__udivmodsi4_ep>

00000b84 <__udivmodsi4_loop>:
 b84:	aa 1f       	adc	r26, r26
 b86:	bb 1f       	adc	r27, r27
 b88:	ee 1f       	adc	r30, r30
 b8a:	ff 1f       	adc	r31, r31
 b8c:	a2 17       	cp	r26, r18
 b8e:	b3 07       	cpc	r27, r19
 b90:	e4 07       	cpc	r30, r20
 b92:	f5 07       	cpc	r31, r21
 b94:	20 f0       	brcs	.+8      	; 0xb9e <__udivmodsi4_ep>
 b96:	a2 1b       	sub	r26, r18
 b98:	b3 0b       	sbc	r27, r19
 b9a:	e4 0b       	sbc	r30, r20
 b9c:	f5 0b       	sbc	r31, r21

00000b9e <__udivmodsi4_ep>:
 b9e:	66 1f       	adc	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	1a 94       	dec	r1
 ba8:	69 f7       	brne	.-38     	; 0xb84 <__udivmodsi4_loop>
 baa:	60 95       	com	r22
 bac:	70 95       	com	r23
 bae:	80 95       	com	r24
 bb0:	90 95       	com	r25
 bb2:	9b 01       	movw	r18, r22
 bb4:	ac 01       	movw	r20, r24
 bb6:	bd 01       	movw	r22, r26
 bb8:	cf 01       	movw	r24, r30
 bba:	08 95       	ret

00000bbc <__tablejump2__>:
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	05 90       	lpm	r0, Z+
 bc2:	f4 91       	lpm	r31, Z
 bc4:	e0 2d       	mov	r30, r0
 bc6:	09 94       	ijmp

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
